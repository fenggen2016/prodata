View(total)
lgc <- grepl('Modified|Disulfide bond', total$type)
filtered <- subset(total, lgc)
View(filtered)
View(keyplayers)
colnames(filtered)[1] <- geneid
colnames(filtered)[1] <- 'geneid'
t <- join(keyplayers, filtered, type = 'left', by = 'geneid')
View(t)
library(shiny)
library(DT)
viz <- function(finaldf){
shinyUI(pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
shinyServer(function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
runApp()
viz <- function(finaldf){
shinyUI(pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
shinyServer(function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
runApp()
viz <- function(finaldf){
shinyUI(pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
shinyServer(function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
return(runApp())
viz <- function(finaldf){
shinyUI(pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
shinyServer(function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
return(runApp())
setwd("~/Desktop/THESIS/Thesis/R/prodata/R")
viz <- function(finaldf){
shinyUI(pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
shinyServer(function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
return(runApp())
}
viz <- function(finaldf){
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
)
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
})
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
library(prodata)
?keyplayers
library(prodata)
ids <- getUID(keyplayers, "[Protein Name] AND Mus musculus[Organism]", "protien" ))
ids <- getUID(keyplayers, "[Protein Name] AND Mus musculus[Organism]", "protien" )
proteindf <- fetchGenebank(ids$UIDs)
proteindf <- getGenPept(ids$UIDs)
ids
ids <- getUID(keyplayers, "[Protein Name] AND Mus musculus[Organism]", "protein" )
proteindf <- getGenPept(ids$UIDs)
res <- unip(id$UIDs)
res <- unip(ids$UIDs)
ptmdf <- readPTM(file = 'output.txt')
setwd()
setwd("~/Desktop/THESIS/Thesis/R/results")
ptmdf <- readPTM(file = 'output.txt')
ptmdf <- readPTM('output.txt')
ptmdf <- readPTM('output.txt')
ptmdf <- ptm(ptmdf, res)
ptmdf <- readPTM('output.txt')
View(ptmdf)
View(res)
ptmdf <- ptm(ptmdf, res)
ptmdf <- ptmClean(ptmdf)
proteindf <- countPTMs(proteindf, ptmdf)
ptmdf <- readPTM('output.txt')
res <- unip(ids$UIDs)
ptmdf <- readPTM('output.txt')
ptmdf <- ptm(ptmdf, res)
ptmdf <- ptmClean(ptmdf)
proteindf <- countPTMs(proteindf, ptmdf)
finaldf <- predictedMW(proteindf, ptmdf)
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- finaldf
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- input$finaldf
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
})
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
}),
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
}),
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
}),
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
}),
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
}),
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers,
})
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz <- function(finaldf) {
shinyApp(
ui <- pageWithSidebar(
headerPanel('Protein Data'),
selectInput("dataset", "Choose a dataset:",
choices = c('keyplayers')),
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
)
),
server = function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"keyplayers" = keyplayers)})
output$mytable <- DT::renderDataTable({
subset(datasetInput(),molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100),
),
mainPanel(
DT::dataTableOutput('mytable')
))
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100)
),
mainPanel(
DT::dataTableOutput('mytable')
))
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
}
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100)
),
mainPanel(
DT::dataTableOutput('mytable')
))
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
},
options = list(height = 600, width = 500)
)
}
viz(finaldf)
viz <- function(finaldf) {
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
numericInput('molec', 'Molecularweight:', 5000),
numericInput('tol','Tolerence:', 100)
),
mainPanel(
DT::dataTableOutput('mytable')
))
),
server = function(input, output) {
output$mytable <- DT::renderDataTable({
subset(finaldf,molecularweight_predicted >= input$molec - input$tol & molecularweight_predicted <=  input$molec + input$tol )
})
},
options = list(height = 600, width = 500)
)
}
viz(finaldf)
load("~/Desktop/THESIS/Thesis/R/prodata/data/keyplayers.rda")
document()
setwd("~/Desktop/THESIS/Thesis/R/prodata/R")
document()
